"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const typedoc_1 = require("typedoc");
const path_1 = require("path");
const fs_1 = require("fs");
const helpers_1 = require("./helpers");
const TYPEDOC_VERSION = typedoc_1.Application.VERSION;
const pluginOptions = (app) => ({
    options: () => ({
        outDir: app.options.getValue('out'),
        hideGenerator: app.options.getValue('hideGenerator'),
        favicon: app.options.getValue('favicon'),
        footerDate: app.options.getValue('footerDate'),
        footerTime: app.options.getValue('footerTime'),
        footerTypedocVersion: app.options.getValue('footerTypedocVersion'),
        customTitle: app.options.getValue('customTitle'),
        customTitleLink: app.options.getValue('customTitleLink'),
        customDescription: app.options.getValue('customDescription')
    }),
});
function load(app) {
    app.options.addDeclaration({
        name: 'favicon',
        help: 'Extras Plugin: Specify the name of the favicon file.',
        type: typedoc_1.ParameterType.String,
        defaultValue: undefined
    });
    app.options.addDeclaration({
        name: 'footerTypedocVersion',
        help: 'Extras Plugin: Appends the TypeDoc version in the footer.',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false
    });
    app.options.addDeclaration({
        name: 'footerDate',
        help: 'Extras Plugin: Appends the date of generation in the footer.',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false
    });
    app.options.addDeclaration({
        name: 'footerTime',
        help: 'Extras Plugin: Appends the time of generation in the footer.',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false
    });
    app.options.addDeclaration({
        name: 'customTitle',
        help: 'Extras Plugin: Specify a custom title, for the top-most title only.',
        type: typedoc_1.ParameterType.String,
        defaultValue: undefined
    });
    app.options.addDeclaration({
        name: 'customTitleLink',
        help: 'Extras Plugin: Specify a custom link for the top-most title.',
        type: typedoc_1.ParameterType.String,
        defaultValue: undefined
    });
    app.options.addDeclaration({
        name: 'customDescription',
        help: 'Extras Plugin: Specify a custom description for the website.',
        type: typedoc_1.ParameterType.String,
        defaultValue: undefined
    });
    const options = pluginOptions(app);
    app.renderer.on(typedoc_1.PageEvent.END, onPageRendered.bind(options));
    app.renderer.once(typedoc_1.RendererEvent.END, onRenderFinished.bind(options));
}
exports.load = load;
function onPageRendered(page) {
    if (!page.contents)
        return;
    const options = this.options();
    // Add icon.
    if (options.favicon) {
        const favicon = (0, helpers_1.isUrl)(options.favicon)
            ? options.favicon
            : (0, helpers_1.makeRelativeToRoot)(page.url, (0, path_1.basename)(options.favicon));
        page.contents = (0, helpers_1.appendFavicon)(page.contents, favicon);
    }
    // Add TypeDoc version.
    if (options.footerTypedocVersion) {
        page.contents = (0, helpers_1.appendToFooter)(page.contents, ` v${TYPEDOC_VERSION}`);
    }
    page.contents = (0, helpers_1.setupNewlineInFooter)(page.contents);
    // Add generation date and/or time.
    if (!options.hideGenerator && (options.footerDate || options.footerTime)) {
        const now = new Date();
        let args = [];
        if (options.footerDate)
            args.push("dateStyle: 'medium'");
        if (options.footerTime)
            args.push("timeStyle: 'long'");
        const dateFormatter = `new Intl.DateTimeFormat(navigator.language, {${args.join(',')}})`;
        // Compute the generation date string on client-side.
        const time = `<br><span id="generation-date"></span><script>window.GENERATION_DATE=${now.getTime()};document.getElementById('generation-date').innerText=${dateFormatter}.format(window.GENERATION_DATE)</script>`;
        page.contents = (0, helpers_1.appendToFooter)(page.contents, time);
    }
    // Set custom title.
    if (options.customTitle) {
        page.contents = (0, helpers_1.replaceTopMostTitle)(page.contents, options.customTitle);
    }
    // Set custom title link.
    if (options.customTitleLink) {
        page.contents = (0, helpers_1.replaceTopMostTitleLink)(page.contents, options.customTitleLink);
    }
    // Set custom description
    if (options.customDescription) {
        page.contents = (0, helpers_1.replaceDescription)(page.contents, options.customDescription);
    }
}
function onRenderFinished() {
    const options = this.options();
    // Copy favicon to output directory.
    if (options.favicon && !(0, helpers_1.isUrl)(options.favicon)) {
        const workingDir = process.cwd();
        const outDir = options.outDir || './docs';
        const inputFavicon = (options.favicon.indexOf(workingDir) === -1) ?
            (0, path_1.join)(workingDir, options.favicon) : options.favicon;
        const outputFavicon = (outDir.indexOf(workingDir) === -1) ?
            (0, path_1.join)(workingDir, outDir, (0, path_1.basename)(options.favicon)) : (0, path_1.join)(outDir, (0, path_1.basename)(options.favicon));
        (0, fs_1.copyFileSync)(inputFavicon, outputFavicon);
    }
}
//# sourceMappingURL=main.js.map